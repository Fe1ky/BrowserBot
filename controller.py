#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 26, 2022 12:18:38 PM CDT  platform: Darwin

from logging import root
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from typing_extensions import IntVar
import drive
import Controller_support



class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("427x378+502+185")
        top.minsize(427, 378)
        top.maxsize(1280, 747)
        top.resizable(1,  1)
        top.title("Controller")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        varT = tk.IntVar()
        trimVarX = tk.IntVar()
        trimVarY = tk.IntVar()
        
        INTERVAL=5 #miliseconds between runs

        # Drive Forward Button     
        def driveF():
            global running
            if running:
                if((varT.get()+trimVarY.get())>0):
                    # print(varT.get()+trimVarY.get(),0)
                    drive.drive(varT.get()+trimVarY.get(),0)
                else:
                    # print(0,0)
                    drive.drive(0,0)
                # print("forward")
                Controller_support.root.after(INTERVAL, driveF)

        def startF(event):
            global running
            running = True
            driveF()

        def stopF(event):
            global running
            running = False
            drive.drive(0,0)
            # print(0,0)
            # print("Stop")


        # Drive Backward Button 
        def driveB():
            global running
            if running:
                if((-varT.get()+trimVarY.get())<0):
                    # print(-(varT.get()-trimVarY.get()),0)
                    drive.drive(-(varT.get()-trimVarY.get()),0)
                else:
                    # print(0,0)
                    drive.drive(0,0)
                # print("Backward")
                Controller_support.root.after(INTERVAL, driveB)

        def startB(event):
            global running
            running = True
            driveB()

        def stopB(event):
            global running
            running = False  
            drive.drive(0,0)
            # print(0,0)
            # print("Stop")

        # Drive Right Button 
        def driveR():
            global running
            if running:
                if((varT.get()+trimVarX.get())>0):
                    # print(0,varT.get()+trimVarX.get())
                    drive.drive(0,varT.get()+trimVarX.get())
                else:
                    # print(0,0)
                    drive.drive(0,0)
                # print("right")
                Controller_support.root.after(INTERVAL, driveR)

        def startR(event):
            global running
            running = True
            driveR()

        def stopR(event):
            global running
            running = False
            drive.drive(0,0)
            # print(0,0)
            # print("Stop")

        # Drive Left Button 
        def driveL():
            global running
            if running:
                if((-varT.get()+trimVarX.get())<0):
                    # print(0,-(varT.get()-trimVarX.get()))
                    drive.drive(0,-(varT.get()-trimVarX.get()))
                else:
                    # print(0,0)
                    drive.drive(0,0)
                # print("Left")
                Controller_support.root.after(INTERVAL, driveL)

        def startL(event):
            global running
            running = True
            driveL()

        def stopL(event):
            global running
            running = False       
            drive.drive(0,0)
            # print(0,0)
            # print("Stop")
        

        # Stop Button 
        def StopNow():
            global running
            if running:
                drive.drive(0,0)
            
                Controller_support.root.after(INTERVAL, StopNow)

        def startStopNow(event):
            global running
            running = True
            StopNow()

        def stopStopNow(event):
            global running
            running = False       
            drive.drive(0,0)
            # print(0,0)
            # print("Stop")

        # Trim sliders reset
        def resetx():
            self.xTrim.set(0)
        def resety():
            self.yTrim.set(0)            
         

        self.Backward = tk.Button(self.top)
        self.Backward.place(relx=0.417, rely=0.495, height=68, width=77)
        self.Backward.configure(activebackground="#ececec")
        self.Backward.configure(activeforeground="#000000")
        self.Backward.configure(background="#d9d9d9")
        self.Backward.configure(compound='left')
        self.Backward.configure(foreground="#000000")
        self.Backward.configure(highlightbackground="#d9d9d9")
        self.Backward.configure(highlightcolor="black")
        self.Backward.configure(text='''↓''')
        self.Backward.bind("<ButtonPress>", startB)
        self.Backward.bind("<ButtonRelease>", stopB)

        self.Forward = tk.Button(self.top)
        self.Forward.place(relx=0.422, rely=0.159, height=68, width=77)
        self.Forward.configure(activebackground="#ececec")
        self.Forward.configure(activeforeground="#000000")
        self.Forward.configure(background="#d9d9d9")
        self.Forward.configure(compound='left')
        self.Forward.configure(foreground="#000000")
        self.Forward.configure(highlightbackground="#d9d9d9")
        self.Forward.configure(highlightcolor="black")
        self.Forward.configure(text='''↑''')
        self.Forward.bind("<ButtonPress>", startF)
        self.Forward.bind("<ButtonRelease>", stopF)

        self.Right = tk.Button(self.top)
        self.Right.place(relx=0.59, rely=0.323, height=68, width=77)
        self.Right.configure(activebackground="#ececec")
        self.Right.configure(activeforeground="#000000")
        self.Right.configure(background="#d9d9d9")
        self.Right.configure(compound='left')
        self.Right.configure(foreground="#000000")
        self.Right.configure(highlightbackground="#d9d9d9")
        self.Right.configure(highlightcolor="black")
        self.Right.configure(text='''→''')
        self.Right.bind("<ButtonPress>", startR)
        self.Right.bind("<ButtonRelease>", stopR)

        self.Left = tk.Button(self.top)
        self.Left.place(relx=0.241, rely=0.323, height=68, width=77)
        self.Left.configure(activebackground="#ececec")
        self.Left.configure(activeforeground="#000000")
        self.Left.configure(background="#d9d9d9")
        self.Left.configure(compound='left')
        self.Left.configure(foreground="#000000")
        self.Left.configure(highlightbackground="#d9d9d9")
        self.Left.configure(highlightcolor="black")
        self.Left.configure(text='''←''')
        self.Left.bind("<ButtonPress>", startL)
        self.Left.bind("<ButtonRelease>", stopL)
        

        self.xTrim = tk.Scale(self.top, from_=-100.0, to=100.0)
        self.xTrim.place(relx=0.187, rely=0.688, relheight=0.103
                , relwidth=0.616)
        self.xTrim.configure(activebackground="#ececec")
        self.xTrim.configure(background="#d9d9d9")
        self.xTrim.configure(foreground="#000000")
        self.xTrim.configure(highlightbackground="#d9d9d9")
        self.xTrim.configure(highlightcolor="black")
        self.xTrim.configure(length="242")
        self.xTrim.configure(orient="horizontal")
        self.xTrim.configure(troughcolor="#d9d9d9")
        self.xTrim.set(0)
        self.xTrim.configure(variable=trimVarX)


        self.yTrim = tk.Scale(self.top, from_=-100.0, to=100.0)
        self.yTrim.place(relx=0.187, rely=0.794, relheight=0.127
                , relwidth=0.616)
        self.yTrim.configure(activebackground="#ececec")
        self.yTrim.configure(background="#d9d9d9")
        self.yTrim.configure(foreground="#000000")
        self.yTrim.configure(highlightbackground="#d9d9d9")
        self.yTrim.configure(highlightcolor="black")
        self.yTrim.configure(length="263")
        self.yTrim.configure(orient="horizontal")
        self.yTrim.configure(troughcolor="#d9d9d9")
        self.yTrim.set(0)
        self.yTrim.configure(variable=trimVarY)

        self.Throttle = tk.Scale(self.top, from_=0.0, to=100.0)
        self.Throttle.place(relx=0.047, rely=0.185, relheight=0.5, relwidth=0.108)
        self.Throttle.configure(activebackground="#ececec")
        self.Throttle.configure(background="#d9d9d9")
        self.Throttle.configure(foreground="#000000")
        self.Throttle.configure(highlightbackground="#d9d9d9")
        self.Throttle.configure(highlightcolor="black")
        self.Throttle.configure(length="192")
        self.Throttle.configure(troughcolor="#d9d9d9")
        self.Throttle.configure(variable=varT)


        self.FL = tk.Button(self.top)
        self.FL.place(relx=0.258, rely=0.159, height=48, width=47)
        self.FL.configure(activebackground="#ececec")
        self.FL.configure(activeforeground="#000000")
        self.FL.configure(background="#d9d9d9")
        self.FL.configure(compound='left')
        self.FL.configure(foreground="#000000")
        self.FL.configure(highlightbackground="#d9d9d9")
        self.FL.configure(highlightcolor="black")
        self.FL.configure(text='''↖''')

        self.FR = tk.Button(self.top)
        self.FR.place(relx=0.656, rely=0.159, height=48, width=47)
        self.FR.configure(activebackground="#ececec")
        self.FR.configure(activeforeground="#000000")
        self.FR.configure(background="#d9d9d9")
        self.FR.configure(compound='left')
        self.FR.configure(foreground="#000000")
        self.FR.configure(highlightbackground="#d9d9d9")
        self.FR.configure(highlightcolor="black")
        self.FR.configure(text='''↗''')

        self.BR = tk.Button(self.top)
        self.BR.place(relx=0.656, rely=0.556, height=48, width=47)
        self.BR.configure(activebackground="#ececec")
        self.BR.configure(activeforeground="#000000")
        self.BR.configure(background="#d9d9d9")
        self.BR.configure(compound='left')
        self.BR.configure(foreground="#000000")
        self.BR.configure(highlightbackground="#d9d9d9")
        self.BR.configure(highlightcolor="black")
        self.BR.configure(text='''↘''')

        self.BL = tk.Button(self.top)
        self.BL.place(relx=0.258, rely=0.556, height=48, width=47)
        self.BL.configure(activebackground="#ececec")
        self.BL.configure(activeforeground="#000000")
        self.BL.configure(background="#d9d9d9")
        self.BL.configure(compound='left')
        self.BL.configure(foreground="#000000")
        self.BL.configure(highlightbackground="#d9d9d9")
        self.BL.configure(highlightcolor="black")
        self.BL.configure(text='''↙''')

        self.ResetX = tk.Button(self.top)
        self.ResetX.place(relx=0.023, rely=0.714, height=38, width=67)
        self.ResetX.configure(activebackground="#ececec")
        self.ResetX.configure(activeforeground="#000000")
        self.ResetX.configure(background="#d9d9d9")
        self.ResetX.configure(compound='left')
        self.ResetX.configure(foreground="#000000")
        self.ResetX.configure(highlightbackground="#d9d9d9")
        self.ResetX.configure(highlightcolor="black")
        self.ResetX.configure(text='''Reset X''')
        self.ResetX.configure(command=resetx)

        self.ResetY = tk.Button(self.top)
        self.ResetY.place(relx=0.023, rely=0.82, height=38, width=67)
        self.ResetY.configure(activebackground="#ececec")
        self.ResetY.configure(activeforeground="#000000")
        self.ResetY.configure(background="#d9d9d9")
        self.ResetY.configure(compound='left')
        self.ResetY.configure(foreground="#000000")
        self.ResetY.configure(highlightbackground="#d9d9d9")
        self.ResetY.configure(highlightcolor="black")
        self.ResetY.configure(text='''Reset Y''')
        self.ResetY.configure(command=resety)

        self.stop = tk.Button(self.top)
        self.stop.place(relx=0.445, rely=0.344, height=58, width=57)
        self.stop.configure(activebackground="#ececec")
        self.stop.configure(activeforeground="#000000")
        self.stop.configure(background="#d9d9d9")
        self.stop.configure(compound='left')
        self.stop.configure(foreground="#000000")
        self.stop.configure(highlightbackground="#d9d9d9")
        self.stop.configure(highlightcolor="black")
        self.stop.configure(text='''STOP''')
        self.stop.bind("<ButtonPress>", startStopNow)
        self.stop.bind("<ButtonRelease>", stopStopNow)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)




def start_up():
    Controller_support.main()

if __name__ == '__main__':
    Controller_support.main()


